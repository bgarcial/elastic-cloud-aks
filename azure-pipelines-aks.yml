trigger:
  branches:
    include:
    - staging
  paths:
    include:
    - eck-manifests
    - scripts
    - azure-pipelines-aks.yml
    exclude:
    - README.md
    - terraform

stages:
- stage: A
  displayName: Getting Ready thirdparty apps
  jobs:
  - job: Deploy
    displayName: Helm deployment 
    pool:
      vmImage: ubuntu-latest

    steps:

    # - task: Kubernetes@1
    #   displayName: Creating NGINX Namespace
    #   inputs:
    #     connectionType: Azure Resource Manager
    #     azureSubscriptionEndpoint: 'Azure-Personal-Subscription'
    #     azureResourceGroup: $(azureResourceGroup)
    #     kubernetesCluster: $(kubernetesCluster)
    #     command: create
    #     arguments: ns nginx

    # - task: Kubernetes@1
    #   displayName: Creating Cert Manager Namespace
    #   inputs:
    #     connectionType: Azure Resource Manager
    #     azureSubscriptionEndpoint: 'Azure-Personal-Subscription'
    #     azureResourceGroup: $(azureResourceGroup)
    #     kubernetesCluster: $(kubernetesCluster)
    #     command: create
    #     arguments: ns cert-manager
    
    - task: HelmInstaller@1
      inputs:
        helmVersionToInstall: $(helmVersion)

    - script: | 
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        helm repo add jetstack https://charts.jetstack.io
        helm repo add autoscaler https://kubernetes.github.io/autoscaler
        helm repo update
      displayName: 'Adding Nginx, Cert manager and autoscaler repositories'

    # - task: HelmDeploy@0
    #   displayName: Deploy Nginx Helm chart
    #   inputs:
    #     connectionType: Azure Resource Manager
    #     azureSubscriptionEndpoint: 'Azure-Personal-Subscription'
    #     azureResourceGroup: $(azureResourceGroup)
    #     kubernetesCluster: $(kubernetesCluster)
    #     command: install
    #     chartType: Name
    #     releaseName: ingress-nginx
    #     chartName: ingress-nginx/ingress-nginx
    #     arguments: --set controller.service.type=LoadBalancer --set controller.service.loadBalancerIP=$(loadBalancerIp) --set controller.replicaCount=2 --namespace nginx
    
    # - task: Kubernetes@1
    #   displayName: Installing Cert Manager CRDs
    #   inputs:
    #     connectionType: Azure Resource Manager
    #     azureSubscriptionEndpoint: 'Azure-Personal-Subscription'
    #     azureResourceGroup: $(azureResourceGroup)
    #     kubernetesCluster: $(kubernetesCluster)
    #     command: apply
    #     arguments: -f https://github.com/jetstack/cert-manager/releases/download/v1.6.0/cert-manager.crds.yaml

    # - task: HelmDeploy@0
    #   displayName: Deploy Cert Manager Helm chart
    #   inputs:
    #     connectionType: Azure Resource Manager
    #     azureSubscriptionEndpoint: 'Azure-Personal-Subscription'
    #     azureResourceGroup: $(azureResourceGroup)
    #     kubernetesCluster: $(kubernetesCluster)
    #     command: install
    #     chartType: Name
    #     releaseName: cert-manager
    #     chartName: jetstack/cert-manager
    #     namespace: cert-manager
    #     version: v1.6.0
    #     arguments: 

    # - task: HelmDeploy@0
    #   displayName: Deploy K8s autoscaler
    #   inputs:
    #     connectionType: Azure Resource Manager
    #     azureSubscriptionEndpoint: 'Azure-Personal-Subscription'
    #     azureResourceGroup: $(azureResourceGroup)
    #     kubernetesCluster: $(kubernetesCluster)
    #     command: install
    #     chartType: Name
    #     releaseName: autoscaler
    #     chartName: autoscaler/cluster-autoscaler
    #     arguments: --set cloudProvider=azure --set autoDiscovery.clusterName=$(kubernetesCluster) --set azureClientID=$(ARM_CLIENT_ID) --set azureClientSecret=$(ARM_CLIENT_SECRET) --set azureSubscriptionID=$(ARM_SUBSCRIPTION_ID) --set azureTenantID=$(ARM_TENANT_ID) --set azureClusterName=$(kubernetesCluster) --set azureResourceGroup=$(azureResourceGroup) --set azureVMType=AKS --set azureNodeResourceGroup=$(azureNodeResourceGroup)

- stage: B
  displayName: Deploying Elastic Search Cluster - ECK
  jobs:
  - job: Deploy
    displayName: Deployment manifests 
    pool:
      vmImage: ubuntu-latest

    steps:

    # - task: Kubernetes@1
    #   displayName: Installing Elastic Search CRDs
    #   inputs:
    #     connectionType: Azure Resource Manager
    #     azureSubscriptionEndpoint: 'Azure-Personal-Subscription'
    #     azureResourceGroup: $(azureResourceGroup)
    #     kubernetesCluster: $(kubernetesCluster)
    #     command: apply
    #     workingDirectory: /home/vsts/work/1/s/eck-manifests
    #     arguments: -f crds.yml
    
    - task: Kubernetes@1
      displayName: Installing Elastic Search Operator
      inputs:
        connectionType: Azure Resource Manager
        azureSubscriptionEndpoint: 'Azure-Personal-Subscription'
        azureResourceGroup: $(azureResourceGroup)
        kubernetesCluster: $(kubernetesCluster)
        command: apply
        workingDirectory: /home/vsts/work/1/s/eck-manifests
        arguments: -f operator.yml
    
    - task: Kubernetes@1
      displayName: kubectl create for secretType generic
      inputs:
        azureSubscriptionEndpoint: 'Azure-Personal-Subscription'
        azureResourceGroup: $(azureResourceGroup)
        kubernetesCluster: $(kubernetesCluster)
        kubernetesServiceEndpoint: 'aks-connection'
        command: apply
        arguments: -f
        secretType: generic
        secretArguments: --from-literal=sa-client-id=$(STORAGE_ACCOUNT_NAME) --from-literal=sa-access-key=$(SA_ACCESS_KEY)
        secretName: azure-sa-credentials
        
    - task: Kubernetes@1
      displayName: Installing Elastic Search Cluster
      inputs:
        connectionType: Azure Resource Manager
        azureSubscriptionEndpoint: 'Azure-Personal-Subscription'
        azureResourceGroup: $(azureResourceGroup)
        kubernetesCluster: $(kubernetesCluster)
        command: apply
        workingDirectory: /home/vsts/work/1/s/eck-manifests
        arguments: -f elastic-search-cluster.yml
