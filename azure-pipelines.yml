# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- staging

pool:
  vmImage: ubuntu-latest

steps:
- script: |
    az login --service-principal --username $(ARM_CLIENT_ID) --password $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
  displayName: 'Authenticating to Azure'
 
- task: terraformInstaller@0
  inputs:
    terraformVersion: '1.0.9'
  displayName: Install Terraform

- script: |
    ls 
    pwd
    cd terraform
    ls
  displayName: Placing terraform directory path 

- task: TerraformCLI@0
  displayName: 'Check terraform version'
  inputs:
    command: version


- task: TerraformCLI@0
  displayName: 'Initializing Terraform'
  inputs:
    command: init
    workingDirectory: /home/vsts/work/1/s/terraform 
    backendType: azurerm
    backendServiceArm: 'Azure Personal Tenant'
    backendAzureRmResourceGroupName: 'pfc-terraform-envs-states'
    backendAzureRmResourceGroupLocation: 'westeurope'
    backendAzureRmStorageAccountName: 'pfcterraformstates'
    backendAzureRmContainerName: 'pfcterraformstates'
    backendAzureRmKey: staging.terraform.tfstate

- task: TerraformCLI@0
  displayName: 'Terraform validate'
  inputs:
    command: validate
    workingDirectory: /home/vsts/work/1/s/terraform

- task: TerraformCLI@0
  displayName: 'Terraform format'
  inputs:
    command: fmt 
    workingDirectory: /home/vsts/work/1/s/terraform

- task: TerraformCLI@0
  displayName: 'Terraform plan'
  inputs:
    command: plan 
    workingDirectory: /home/vsts/work/1/s/terraform
    environmentServiceName: 'Azure Personal Tenant'
    publishPlanResults: 'staging_env_plan'
    commandOptions: -var client_id=$(ARM_CLIENT_ID) -var client_secret=$(ARM_CLIENT_SECRET) -var subscription_id=$(ARM_SUBSCRIPTION_ID) -var tenant_id=$(ARM_TENANT_ID) -var db_login=$(DB_USERNAME) -var db_password=$(DB_PASSWORD)

- task: TerraformCLI@0
  displayName: 'Terraform apply'
  inputs:
    command: apply
    environmentServiceName: 'Azure Personal Tenant'
    workingDirectory: /home/vsts/work/1/s/terraform
    commandOptions: -var client_id=$(ARM_CLIENT_ID) -var client_secret=$(ARM_CLIENT_SECRET) -var subscription_id=$(ARM_SUBSCRIPTION_ID) -var tenant_id=$(ARM_TENANT_ID) -var db_login=$(DB_USERNAME) -var db_password=$(DB_PASSWORD)
    





   
apiVersion: networking.k8s.io/v1beta1 # extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    # add an annotation indicating the issuer to use.
    cert-manager.io/cluster-issuer: letsencrypt-prod # letsencrypt-staging
    kubernetes.io/ingress.class: nginx
  name: backend-site-ingress
  namespace: backend
spec:
  rules:
  - host: backend.bgarcial.me
    http:
      paths:
      - backend:
          serviceName: backend-demo
          servicePort: 80
        path: /
  tls: # < placing a host in the TLS config will indicate a cert should be created
  - hosts:
    - backend.bgarcial.me
    secretName: letsencrypt-prod # letsencrypt-staging